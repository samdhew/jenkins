response_code = ""

// Function to display information with timestamp
def displayInfo(String title) {
    def date = new Date().format("dd-MM-yyyy HH:mm:SS", TimeZone.getTimeZone('UTC'))
    echo "################# ${title} #################"
    println date
    echo "Release: ${env.RELEASE_VERSION}"
    echo "Package: ${env.ARTIFACT_NAME}"
    echo "New: ${new_release}"
}
 
// Function to perform package download
def downloadPackage() {
    displayInfo("Package Download")
    echo "Removing previous packages..."
    sh 'rm -f abc-webapp-*.tar.gz'
    echo "Package ${env.ARTIFACT_NAME} downloading..."
    sh """
        aws s3 cp s3://abc-dev-app-artifact/${env.ARTIFACT_NAME} .
        pwd
        ls -lah
    """
}
 
// Function to copy to server
def copyToServer(String server) {
    sshagent(credentials: ['abc_dev_jenkins']) {
        displayInfo("Copy to ${server} server")
        sh """
            scp ${env.ARTIFACT_NAME} ${env.USERNAME}@${server}:${env.BASE}/pkgs/;
            ssh -o StrictHostKeyChecking=no -tt ${env.USERNAME}@${server} 'uptime; \
                tar -xzvf ${env.BASE}/pkgs/${env.ARTIFACT_NAME} -C ${env.BASE}/opt/abc/releases/; \
                ls -lah ${env.BASE}/opt/abc/releases/';
        """
    }
}
 
// Function to deploy on server
def deployOnServer(String server) {
    sshagent(credentials: ['abc_dev_jenkins']) {
        displayInfo("Deploy to ${server} server")
        sh """
            ssh -o StrictHostKeyChecking=no -tt ${env.USERNAME}@${server} 'uptime; \
                echo "Stopping tomcat..."; \
                sudo systemctl stop abc-tomcat; \
                cd ${env.BASE}/opt/abc; \
                rm current.war; \
                ln -s releases/${env.RELEASE_VERSION}/${env.RELEASE_VERSION}.war current.war; \
                cp -pr ${env.BASE}/var/tomcat/webapps/abc ${env.BASE}/var/tomcat/webapps/abc-\$(date '+%d%m%Y'); \
                rm -rf ${env.BASE}/var/tomcat/webapps/abc/*; \
                cd ${env.BASE}/var/tomcat/webapps/abc/; \
                unzip /${env.BASE}/opt/abc/releases/${env.RELEASE_VERSION}/${env.RELEASE_VERSION}.war; \
                echo "Starting tomcat..."; \
                sudo systemctl start abc-tomcat; \
                sleep 60;';
        """
    }
}
 
// Function to perform health check
def healthCheck(String server) {
    def url = "http://${server}:8080/abc/status"
 
    displayInfo("HealthCheck of ${server} server")
    while (response_code != "200")
    {
        response_code = sh(script: """
            curl_response=\$(curl -sL -w '%{http_code}' ${url} -o /dev/null);
            if [ "\${curl_response}" != "200" ];
            then
                sleep 15s;
            fi;
            echo "\${curl_response}";
        """, returnStdout: true).trim()
 
        echo "HTTP response status code: ${response_code}"
    }
}
 
// Pipeline definition
pipeline {
    agent any
    environment {
        RELEASE_VERSION = "abc-webapp-${release_version}"
        ARTIFACT_NAME = "${env.RELEASE_VERSION}.tar.gz"
 
        BASE = "/export/home/apps/abc"
        USERNAME = "psadmin"
        APP_01 = "abc-app-01.xyz-dev.ggg.com"
    }
    parameters {
        validatingString(
            name: 'release_version',
            defaultValue: '',
            regex: /^[0-9]+.[0-9]+.[0-9]+$/,
            failedValidationMessage: 'Please refer to the example in description.',
            description: 'Example: 9.4.1'
        )
        booleanParam(
            name: 'new_release',
            defaultValue: true,
            description: 'If True, the package will get downloaded from the S3 bucket. If False, the package should reside on the cluster. Default is \'True\'.'
        )
    }
    stages {
        stage('Release Info') {
            steps {
                script {
                    displayInfo("Release Info")
                }
            }
        }
        stage('Package Download') {
            when {
                expression {
                    return params.new_release
                }
            }
            steps {
                script {
                    downloadPackage()
                }
            }
        }
        stage('Package Copy') {
            when {
                expression {
                    return params.new_release
                }
            }
            steps {
                script {
                    copyToServer(env.APP_01)
                }
            }
        }
        stage('Package Deploy') {
            input {
                message "Do you want to proceed for APP_01 deployment?"
            }
            steps {
                script {
                    deployOnServer(env.APP_01)
                }
            }
        }
        stage('Server HealthCheck') {
            steps {
                script {
                    healthCheck(env.APP_01)
                }
            }
        }
    }
}
